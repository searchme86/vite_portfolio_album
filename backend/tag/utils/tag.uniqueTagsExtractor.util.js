export const extractUniqueTags = (tagsToExtract) => {
  // 의미: 태그 배열에서 고유 태그를 추출하는 유틸리티 함수
  // 이유: 중복 제거 로직을 분리해 단일 책임 준수
  // 비유: 책갈피 중복을 제거하는 도구
  if (!Array.isArray(tagsToExtract)) {
    // 의미: 입력값이 배열인지 확인
    // 이유: 예상치 못한 입력 방어
    // 비유: 받은 목록이 책갈피 목록인지 확인
    return [];
  }

  const uniqueTags = []; // 의미: 고유 태그를 담을 배열 초기화
  // 이유: 중복 제거 후 결과 저장
  // 비유: 중복된 책갈피를 골라낼 새 상자 준비
  const seenTags = new Set(); // 의미: 이미 본 태그를 추적
  // 이유: 중복 체크를 빠르게 하기 위해 Set 사용
  // 비유: 이미 본 책갈피를 체크리스트에 기록

  for (const tag of tagsToExtract) {
    // 의미: 모든 태그를 순회하며 중복 제거
    // 이유: 태그가 undefined/null일 수 있으므로 안전하게 처리
    // 비유: 책갈피를 하나씩 확인하며 정리
    if (tag && !seenTags.has(tag)) {
      // 의미: 태그가 유효하고 중복되지 않았는지 확인
      // 이유: 유효하지 않은 태그 걸러내고 중복 방지
      // 비유: 새롭고 유효한 책갈피만 모으는 것
      seenTags.add(tag); // 의미: 태그를 본 것으로 기록
      // 이유: 다음번에 중복 여부 빠르게 확인
      // 비유: 체크리스트에 추가
      uniqueTags.push(tag); // 의미: 고유 태그 배열에 추가
      // 이유: 최종 결과 생성
      // 비유: 정리된 책갈피를 상자에 넣음
    }
  }

  return uniqueTags; // 의미: 고유 태그 배열 반환
  // 이유: 서비스에서 사용
  // 비유: 정리된 책갈피 목록 넘겨줌
};
